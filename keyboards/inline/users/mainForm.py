from aiogram import Bot
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import ChatNotFound

from crud import CRUDBots, CRUDChats, CRUDUsers
import requests

from states.users import UserStates

main_cb = CallbackData("main", "target", "action", "id", "editId")


class MainForms:
    @staticmethod
    async def back_ikb(target: str, action: str, bot_name: str = "", bot_id: int = 0) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action, bot_id, bot_name))
                ]
            ]
        )

    @staticmethod
    async def main_menu_ikb(user_id: int) -> InlineKeyboardMarkup:
        data_main_menu = {
            "üë®‚Äçüíª –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç": {"target": "AddBot", "action": "get_AddBot", "id": user_id, "editId": 0},
            "ü§ñ –ú–æ–∏ –±–æ—Ç—ã": {"target": "MyBots", "action": "get_MyBots", "id": user_id, "editId": 0},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=str(name_menu),
                                         callback_data=main_cb.new(target=target_menu['target'],
                                                                   action=target_menu['action'],
                                                                   id=target_menu['id'],
                                                                   editId=target_menu['editId']
                                                                   )
                                         )
                ] for name_menu, target_menu in data_main_menu.items()
            ]
        )

    @staticmethod
    async def get_my_bots(user_id: int) -> InlineKeyboardMarkup:
        my_bots = await CRUDBots.get_all(user_id=user_id)
        get_bot = []
        name_bot = {}
        for bot in my_bots:
            if bot.bot_token != "None":
                get_bot.append(bot)

        # https://t.me/+r-qGqZ7b1DBmN2Yy
        for bots in get_bot:
            data_bot = requests.get(f"https://api.telegram.org/bot{str(bots.bot_token)}/getMe")
            get_data_bot = data_bot.json()
            name_bot[get_data_bot['result']['username']] = {"bot_id": f"{bots.id}"}

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=name_menu,
                                                         callback_data=main_cb.new(target="MyBots",
                                                                                   action="get_ShowBot",
                                                                                   id=bot_items['bot_id'],
                                                                                   editId=str(name_menu)))
                                ] for name_menu, bot_items in name_bot.items()
                            ] +
                            [
                                [
                                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target="MainMenu",
                                                                                                    action="get_MainMenu",
                                                                                                    id=user_id,
                                                                                                    editId=""))
                                ]
                            ]
        )

    @staticmethod
    async def settings_current_bot(bot_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ò†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                         callback_data=main_cb.new(target="MyBots",
                                                                   action="BlockedUser",
                                                                   id=bot_id,
                                                                   editId=""))
                ],
                [
                    InlineKeyboardButton(text="üìÖ –†–∞—Å—Å—ã–ª–∫–∞",
                                         callback_data=main_cb.new(target="MyBots",
                                                                   action="NewslettersBot",
                                                                   id=bot_id,
                                                                   editId="")),
                    InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                         callback_data=main_cb.new(target="MyBots",
                                                                   action="StatisticsBot",
                                                                   id=bot_id,
                                                                   editId=""))
                ],
                [
                    InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
                                         callback_data=main_cb.new(target="MyBots",
                                                                   action="WelcomeText",
                                                                   id=bot_id,
                                                                   editId="")),
                    InlineKeyboardButton(text="üí¨ –ß–∞—Ç—ã",
                                         callback_data=main_cb.new(target="MyBots",
                                                                   action="AddChat",
                                                                   id=bot_id,
                                                                   editId=""))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new(target="MyBots",
                                                                   action="get_MyBots",
                                                                   id=0,
                                                                   editId=""
                                                                   )
                                         )
                ]
            ]
        )

    @staticmethod
    async def approve_ikb(user_id: int, bot_id: int) -> InlineKeyboardMarkup:
        data_main_menu = {
            "–î–∞": {"target": "MyBots", "action": "AddWelcomeTxt", "id": user_id, "editId": bot_id},
            "–ù–µ—Ç": {"target": "MyBots", "action": "get_MyBots", "id": user_id, "editId": bot_id},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=str(name_menu),
                                         callback_data=main_cb.new(target=target_menu['target'],
                                                                   action=target_menu['action'],
                                                                   id=target_menu['id'],
                                                                   editId=""
                                                                   )
                                         ) for name_menu, target_menu in data_main_menu.items()
                ]
            ]
        )

    @staticmethod
    async def get_chat(len_users: int, first: int, bot_id: int, message):
        get_bot = await CRUDBots.get(id=bot_id)
        users = await CRUDUsers.get_all(bot_id=get_bot.bot_id)

        my_bot = Bot(token=get_bot.bot_token)
        count = first
        try:
            if len_users == count:
                return
            else:
                for user in users[first: len_users]:
                    await my_bot.send_message(text=message.text,
                                              chat_id=user.user_id)
                    count += 1
        except ChatNotFound:
            users[count].block = True
            await CRUDUsers.update(user=users[count])
            count += 1
            await MainForms.get_chat(first=count, len_users=len_users, message=message, bot_id=bot_id)

    @staticmethod
    async def process(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith("main"):
                data = main_cb.parse(callback_data=callback.data)
                if data.get("target") == "MainMenu":
                    if data.get("action") == "get_MainMenu":
                        await callback.message.edit_text(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
                                                         reply_markup=await MainForms.main_menu_ikb(
                                                             user_id=callback.from_user.id)
                                                         )

                elif data.get("target") == "AddBot":
                    if data.get("action") == "get_AddBot":
                        text = "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç, –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è:\n\n" \
                               "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @BotFather –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –±–æ—Ç\n" \
                               "2. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω (12345:6789ABCDEF) ‚Äî " \
                               "—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç" \
                               "/add_bot (–í–∞—à —Ç–æ–∫–µ–Ω)\n\n" \
                               "–í–∞–∂–Ω–æ: –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ –±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ " \
                               "(Controller Bot, —Ä–∞–∑–Ω—ã–µ CRM –∏ —Ç.–¥.)"

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.back_ikb(
                                                             target="MainMenu",
                                                             action="get_MainMenu")
                                                         )

                elif data.get("target") == "MyBots":
                    if data.get("action") == "get_MyBots":
                        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
                                                         reply_markup=await MainForms.get_my_bots(
                                                             user_id=callback.from_user.id)
                                                         )

                    elif data.get("action") == "get_ShowBot":

                        bot_id = int(data.get("id"))
                        bot_name = data.get("editId")

                        if bot_name == "":
                            get_bot = await CRUDBots.get(id=bot_id)
                            my_bot = Bot(token=get_bot.bot_token)
                            get_bot = await my_bot.get_me()
                            bot_name = get_bot.username

                        await callback.message.edit_text(text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º <a href='t.me/{bot_name}'>{bot_name}</a>",
                                                         reply_markup=await MainForms.settings_current_bot(
                                                             bot_id=bot_id),
                                                         parse_mode="HTML")

                    elif data.get("action") == "BlockedUser":
                        bot_id = int(data.get("id"))
                        await callback.message.edit_text(
                            text="–ß—Ç–æ –±—ã –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —á–∞—Ç–µ –Ω–∞–∂–∞—Ç—å '–û—Ç–≤–µ—Ç–∏—Ç—å' "
                                 "–∑–∞—Ç–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å <i>/ban</i>\n\n"
                                 "–ß—Ç–æ –±—ã —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —á–∞—Ç–µ –Ω–∞–∂–∞—Ç—å '–û—Ç–≤–µ—Ç–∏—Ç—å' "
                                 "–∑–∞—Ç–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å <i>/unban</i>\n\n"
                                 "–ü–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–æ/—Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –±–æ—Ç–µ",
                            reply_markup=await MainForms.back_ikb(target="MyBots",
                                                                  action="get_ShowBot",
                                                                  bot_id=bot_id),
                            parse_mode="HTML"
                            )

                    elif data.get("action") == "NewslettersBot":
                        await state.update_data(bot_id=int(data.get("id")))
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                        await UserStates.Newsletters.set()

                    elif data.get("action") == "StatisticsBot":
                        bot_id = int(data.get("id"))
                        get_bot = await CRUDBots.get(id=bot_id)
                        users = await CRUDUsers.get_all(bot_id=get_bot.bot_id)
                        get_ban_bot = await CRUDUsers.get_all(ban=True)
                        get_blocked_bot = await CRUDUsers.get_all(block=True)

                        text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n" \
                               f"‚ùóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ –±–æ—Ç–µ : {len(users)}\n" \
                               f"üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö –≤ —á–∞—Ç–µ : {len(get_ban_bot)}\n" \
                               f"‚ò†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–∏–ª–∏/–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –±–æ—Ç–∞ : {len(get_blocked_bot)}\n\n" \
                               f"<i>–°—á–µ—Ç—á–∏–∫ —Ç–µ—Ö, –∫—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.</i>"

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForms.back_ikb(
                                                             target="MyBots",
                                                             action='get_ShowBot',
                                                             bot_id=bot_id),
                                                         parse_mode="HTML")

                    elif data.get("action") == "WelcomeText":
                        bot_id = int(data.get('id'))
                        #await state.update_data(any_bot_id=bot_id)
                        get_bot = await CRUDBots.get(id=bot_id)
                        if get_bot:
                            welcome_txt = get_bot.welcome_text
                            await state.update_data(any_bot_id=bot_id)
                            if welcome_txt == "None":
                                await callback.message.edit_text(text="–£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n"
                                                                      "–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π?",
                                                                 reply_markup=await MainForms.approve_ikb(
                                                                     user_id=callback.from_user.id,
                                                                     bot_id=bot_id)
                                                                 )
                            else:
                                await callback.message.edit_text(text="–í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n\n"
                                                                      f"{welcome_txt}\n\n"
                                                                      f"–ñ–µ–ª–µ–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π?",
                                                                 reply_markup=await MainForms.approve_ikb(
                                                                     user_id=callback.from_user.id,
                                                                     bot_id=bot_id)
                                                                 )
                        else:
                            await callback.message.edit_text(text="–ë–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                                                             reply_markup=await MainForms.back_ikb(
                                                                 action="get_MyBots",
                                                                 target="MyBots")
                                                             )

                    elif data.get("action") == "AddChat":
                        bot_id = int(data.get('id'))
                        get_bot = await CRUDBots.get(id=bot_id)

                        if get_bot:
                            get_chat_bot = await CRUDChats.get(bot_id=get_bot.bot_id)
                            if get_chat_bot:
                                my_bot = Bot(token=get_bot.bot_token)
                                get_chat = await my_bot.get_chat(chat_id=get_chat_bot.chat_id)
                                await callback.message.edit_text(text=f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ: "
                                                                      f"<a href='https://t.me/{get_chat_bot.chat_id}'>{get_chat.title}</>",
                                                                 reply_markup=await MainForms.back_ikb(
                                                                     target="MyBots",
                                                                     action='get_ShowBot',
                                                                     bot_id=bot_id),
                                                                 parse_mode="HTML")
                            else:
                                await callback.message.edit_text(text="–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç—ã, "
                                                                      "–ø–æ—ç—Ç–æ–º—É –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç "
                                                                      "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.\n\n"
                                                                      "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —á–∞—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç "
                                                                      "–∫–∞–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
                                                                 reply_markup=await MainForms.back_ikb(
                                                                     target="MyBots",
                                                                     action="get_ShowBot",
                                                                     bot_id=bot_id)
                                                                 )
                        else:
                            await callback.message.edit_text(text="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

                    elif data.get("action") == "AddWelcomeTxt":
                        await UserStates.WelcomeText.set()
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç")

        if message:
            if state:
                if await state.get_state() == "UserStates:WelcomeText":
                    try:
                        data = await state.get_data()
                        get_bot = await CRUDBots.get(id=int(data["any_bot_id"]))
                        get_bot.welcome_text = message.text
                        await CRUDBots.update(bot=get_bot)
                        await message.answer(text="–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞\n\n"
                                                  f"{message.text}",
                                             reply_markup=await MainForms.main_menu_ikb(user_id=message.from_user.id)
                                             )
                        await state.finish()
                    except Exception as e:
                        print(e)
                        await message.answer(text="–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞\n\n"
                                                  "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç",
                                             reply_markup=await MainForms.main_menu_ikb(user_id=message.from_user.id)
                                             )

                elif await state.get_state() == "UserStates:Newsletters":
                    try:
                        data = await state.get_data()
                        get_bot = await CRUDBots.get(id=int(data.get('bot_id')))
                        users = await CRUDUsers.get_all(bot_id=get_bot.bot_id)
                        await MainForms.get_chat(len_users=len(users), first=0, bot_id=int(data.get('bot_id')),
                                                 message=message)
                        await message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞')
                        await state.finish()
                    except ChatNotFound as e:
                        print(e)
                    except Exception as e:
                        print(e)
                        await message.answer(text="–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞")
                        await state.finish()
